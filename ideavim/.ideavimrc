""" -----------------------------------------
""" Jochem's IdeaVim settings
""" The bindings are inspired by the Helix editor keymap
""" https://docs.helix-editor.com/keymap.html
"""
""" Uses the following external plugins:
""" * AceJump (but not the vim-easymotion bridge plugin)
""" * GitHub Copilot
""" * IdeaVim-Quickscope
""" * Peekaboo
""" * WhichKey
""" Other plugins which feel vim-like:
""" * GoldenRatio (automatically scales the active window to take up more space)
""" -----------------------------------------

""" Map leader to space ---------------------
let mapleader=" "

""" Builtin Plugins  --------------------------------
" Add vim motions to the tree view, see: https://github.com/JetBrains/ideavim/wiki/NERDTree-support
set NERDTree
" Provides text-object 'a' (argument). Consider using 'cia' and 'daa' to Delete An Argument
set argtextobj
" Use 'cx{motion}'/'{Visual}X' to make a selection and then again to exchange them
set exchange
" Shortly highlight yanked text
set highlightedyank
" Extends the '%' motion to match more than just parentheses, see `let g:argtextobj_pairs`
set matchit
" Use 'iq'/'aq' to select an inner/around quote, 'ab'/'ib' for any parentheses, curly braces, or angle brackets
set mini-ai
" T-Pope's famous surround plugin, consider using 'ds)" and 'ysiw"'
set surround
" Normally `{` and `}` match only empty lines, now they also match lines with only whitespace
set vim-paragraph-motion

""" External Plugins  --------------------------------
" Peekaboo plugin shows registry in floating window
set peekaboo
" QuickScope plugin highlists a next character for quick f/t motion
set quickscope
" WhichKey plugin shows keybindings in a floating window
set which-key

""" Plugin settings -------------------------
let g:argtextobj_pairs="[:],(:),<:>,{:}"

""" WhichKey settings -----------------------
"set timeoutlen=8000
set timeoutlen=80000
let g:WhichKey_ShowVimActions="true"
let g:WhichKey_DefaultDelay=1000
let g:WhichKey_ShowTypedSequence="true"
let g:WhichKey_SortOrder="by_key_prefix_first"
let g:WhichKey_SortCaseSensitive="false"

""" -----------------------------------------
""" WhichKey Vanilla descriptions------------
""" Replace "vanilla" descriptions when https://github.com/TheBlob42/idea-which-key/pull/86 has become available

""" Whichkey goto descriptions
let g:WhichKeyDesc_vanilla_goto="g goto..."
let g:WhichKeyDesc_vanilla_goto_hash="g# jump to previous instance of word under cursor"
let g:WhichKeyDesc_vanilla_goto_dollar="g$ jump to last visible character on line"
let g:WhichKeyDesc_vanilla_goto_percent="g% Cycle match groups (eg. if, else, end)"
let g:WhichKeyDesc_vanilla_goto_amp="g& repeat last substitute (:s)"
let g:WhichKeyDesc_vanilla_goto_quote="g' jump to mark (without populating jumplist)"
let g:WhichKeyDesc_vanilla_goto_open_bracket="g( jump to previous end of sentence"
let g:WhichKeyDesc_vanilla_goto_close_bracket="g) jump to next end of sentence"
let g:WhichKeyDesc_vanilla_goto_star="g* jump to next instance of word under cursor"

let g:WhichKeyDesc_vanilla_goto_0="g0 jump to first visible character on line"
"let g:WhichKeyDesc_vanilla_goto_8="g8 print hex values of character under cursor"
let g:WhichKeyDesc_vanilla_goto_8="g8"

"let g:WhichKeyDesc_vanilla_goto_C_g="g<C-g> print cursor position"
let g:WhichKeyDesc_vanilla_goto_C_g="g<C-g>"
"let g:WhichKeyDesc_vanilla_goto_C_h="g<C-h> start select mode, blockwise"
let g:WhichKeyDesc_vanilla_goto_C_h="g<C-h>"

"let g:WhichKeyDesc_vanilla_goto_down="g<Down> same as `gj`"
let g:WhichKeyDesc_vanilla_goto_down="g<Down>"
"let g:WhichKeyDesc_vanilla_goto_end="g<End> same as `g$`"
let g:WhichKeyDesc_vanilla_goto_end="g<End>"
"let g:WhichKeyDesc_vanilla_goto_home="g<Home> same as `g0`"
let g:WhichKeyDesc_vanilla_goto_home="g<Home>"
"let g:WhichKeyDesc_vanilla_goto_up="g<Up> same as `gk`"
let g:WhichKeyDesc_vanilla_goto_up="g<Up>"

"let g:WhichKeyDesc_vanilla_goto_at="g@ call `operatorfunc` on motion"
let g:WhichKeyDesc_vanilla_goto_at="g@"
let g:WhichKeyDesc_vanilla_goto_caret="g^ jump to first visible non-whitespace character on line"
let g:WhichKeyDesc_vanilla_goto_underscore="g_ jump to last visible non-whitespace character on line"
"let g:WhichKeyDesc_vanilla_goto_backtick="g` jump to mark (without populating jumplist)"
let g:WhichKeyDesc_vanilla_goto_backtick="g`"

let g:WhichKeyDesc_vanilla_goto_a="ga character info"
"let g:WhichKeyDesc_vanilla_goto_c="gc commentary..."
"let g:WhichKeyDesc_vanilla_goto_c_c="gcc comment line"
"let g:WhichKeyDesc_vanilla_goto_c_u="gcu add comment above line"
let g:WhichKeyDesc_vanilla_goto_D="gD go to declaration"
let g:WhichKeyDesc_vanilla_goto_d="gd go to definition"
let g:WhichKeyDesc_vanilla_goto_E="gE jump to end of prev WORD"
let g:WhichKeyDesc_vanilla_goto_e="ge jump to end of prev word"
let g:WhichKeyDesc_vanilla_goto_g="gg jump to first line"
"let g:WhichKeyDesc_vanilla_goto_h="gh start select mode, characterwise"
let g:WhichKeyDesc_vanilla_goto_h="gh"
"let g:WhichKeyDesc_vanilla_goto_H="gH start select mode, linewise"
let g:WhichKeyDesc_vanilla_goto_H="gH"
let g:WhichKeyDesc_vanilla_goto_I="gI insert text in column 1 [count] times"
"let g:WhichKeyDesc_vanilla_goto_i="gi jump to last insertion and INSERT"
let g:WhichKeyDesc_vanilla_goto_j="gj down (honor soft-wrapping)"
let g:WhichKeyDesc_vanilla_goto_J="gJ join next line preserve spaces"
let g:WhichKeyDesc_vanilla_goto_k="gk up (honor soft-wrapping)"
let g:WhichKeyDesc_vanilla_goto_m="gm jump to middle of the screen (horizontally)"
let g:WhichKeyDesc_vanilla_goto_n="gn select up to next match"
let g:WhichKeyDesc_vanilla_goto_N="gN select up to prev match"
let g:WhichKeyDesc_vanilla_goto_o="go jump to [count]th character in file"
let g:WhichKeyDesc_vanilla_goto_p="gp paste after cursor and move cursor after new text"
let g:WhichKeyDesc_vanilla_goto_P="gP paste before cursor and move cursor after new text"
let g:WhichKeyDesc_vanilla_goto_q="gq format line (wrap at textwidth)"
let g:WhichKeyDesc_vanilla_goto_t="gt jump to next tab"
let g:WhichKeyDesc_vanilla_goto_T="gT jump to previous tab"
let g:WhichKeyDesc_vanilla_goto_u="gu change to lowercase"
let g:WhichKeyDesc_vanilla_goto_U="gU change to uppercase"
let g:WhichKeyDesc_vanilla_goto_v="gv reselect visual select"
let g:WhichKeyDesc_vanilla_goto_question_mark="g? rotate letter by 13th places (ROT13)"

let g:WhichKeyDesc_vanilla_goto_tilde="g~ toggle character case"

""" Whichkey Prev/Next descriptions
let g:WhichKeyDesc_vanilla_next="] next..."
let g:WhichKeyDesc_vanilla_prev="[ prev..."
let g:WhichKeyDesc_vanilla_next_close_square="]] jump [count] sections forward or next `{`"
let g:WhichKeyDesc_vanilla_next_open_square="][ jump [count] sections forward or next `}`"
let g:WhichKeyDesc_vanilla_prev_open_square="[[ jump [count] sections back or previous `{`"
let g:WhichKeyDesc_vanilla_prev_close_square="[] jump [count] sections forward or previous `}`"
let g:WhichKeyDesc_vanilla_prev_open_bracket="[( jump to [count] previous unmatched `(`"
let g:WhichKeyDesc_vanilla_prev_open_curly="[{ jump to [count] previous unmatched `{`"
let g:WhichKeyDesc_vanilla_next_close_bracket="]) jump to [count] next unmatched `)`"
let g:WhichKeyDesc_vanilla_next_close_curly="]} jump to [count] next unmatched `}`"
let g:WhichKeyDesc_vanilla_prev_b="[b jump to start of prev Word (smartcase)"
let g:WhichKeyDesc_vanilla_next_b="]b jump to end of prev Word (smartcase)"
let g:WhichKeyDesc_vanilla_prev_M="[M jump to end of prev method"
let g:WhichKeyDesc_vanilla_next_M="]M jump to end of next method"
let g:WhichKeyDesc_vanilla_prev_m="[m jump to start of prev method"
let g:WhichKeyDesc_vanilla_next_m="]m jump to start of next method"
let g:WhichKeyDesc_vanilla_prev_p="[p paste before cursor without align"
let g:WhichKeyDesc_vanilla_prev_P="[P paste before cursor without align"
let g:WhichKeyDesc_vanilla_next_p="]p paste after cursor without align"
let g:WhichKeyDesc_vanilla_next_P="]P paste before cursor without align"
let g:WhichKeyDesc_vanilla_prev_s="[s to prev misspelled word"
let g:WhichKeyDesc_vanilla_next_s="]s to next misspelled word"
let g:WhichKeyDesc_vanilla_prev_w="[w jump to start of next Word (smartcase)"
let g:WhichKeyDesc_vanilla_next_w="]w jump to end of next Word (smartcase)"

""" Whichkey Z menu descriptions
let g:WhichKeyDesc_vanilla_Z="Z Z menu..."
let g:WhichKeyDesc_vanilla_Z_Z="ZZ save and quit (window)"
let g:WhichKeyDesc_vanilla_Z_Q="ZQ quit without saving"

""" Whichkey view mode descriptions
let g:WhichKeyDesc_vanilla_view="z view mode..."
let g:WhichKeyDesc_vanilla_view_plus="z+ jump to first line of next screen"
let g:WhichKeyDesc_vanilla_view_caret="z^ jump to last line of prev screen"
"let g:WhichKeyDesc_vanilla_view_minus="z- scroll to bottom of screen and puts cursor at the start of the line"
let g:WhichKeyDesc_vanilla_view_minus="z-"
"let g:WhichKeyDesc_vanilla_view_period="z. scroll to middle of screen and puts cursor at the start of the line"
let g:WhichKeyDesc_vanilla_view_period="z."
"let g:WhichKeyDesc_vanilla_view_enter="z<Enter> scroll to top of screen and puts cursor at the start of the line"
let g:WhichKeyDesc_vanilla_view_enter="z<Enter>"
"let g:WhichKeyDesc_vanilla_view_left="z<Left> same as `zh`"
let g:WhichKeyDesc_vanilla_view_left="z<Left>"
"let g:WhichKeyDesc_vanilla_view_right="z<Right> same as `zl`"
let g:WhichKeyDesc_vanilla_view_right="z<Right>"

let g:WhichKeyDesc_vanilla_view_A="zA toggle all folds under cursor"
let g:WhichKeyDesc_vanilla_view_a="za toggle fold under cursor"
let g:WhichKeyDesc_vanilla_view_b="zb scroll to bottom"
let g:WhichKeyDesc_vanilla_view_C="zC close all folds under cursor"
let g:WhichKeyDesc_vanilla_view_c="zc close fold under cursor"
let g:WhichKeyDesc_vanilla_view_e="ze scroll horizontally to put cursor on last column"
let g:WhichKeyDesc_vanilla_view_h="zh scroll 1 column horizontally to the left"
let g:WhichKeyDesc_vanilla_view_H="zH scroll horizontally half a screen"
let g:WhichKeyDesc_vanilla_view_j="zj go to start of next fold"
let g:WhichKeyDesc_vanilla_view_k="zk go to end of previous fold"
let g:WhichKeyDesc_vanilla_view_l="zl scroll 1 column horizontally to the right"
let g:WhichKeyDesc_vanilla_view_L="zL scroll horizontally half a screen"
let g:WhichKeyDesc_vanilla_view_M="zM close all folds"
let g:WhichKeyDesc_vanilla_view_m="zm fold more"
let g:WhichKeyDesc_vanilla_view_O="zO open all folds under cursor"
let g:WhichKeyDesc_vanilla_view_o="zo open fold under cursor"
let g:WhichKeyDesc_vanilla_view_r="zr fold less"
let g:WhichKeyDesc_vanilla_view_R="zR open all folds"
let g:WhichKeyDesc_vanilla_view_R="zR unfold all"
let g:WhichKeyDesc_vanilla_view_s="zs scroll horizontally to put cursor on first column"
let g:WhichKeyDesc_vanilla_view_t="zt scroll line to top"
let g:WhichKeyDesc_vanilla_view_v="zv open folds to show cursor line"
let g:WhichKeyDesc_vanilla_view_x="zx update folds"
let g:WhichKeyDesc_vanilla_view_z="zz scroll to center"

let g:WhichKeyDesc_vanilla_window="<C-w> Window..."
let g:WhichKeyDesc_vanilla_window_down="<C-w><down> move split down"
let g:WhichKeyDesc_vanilla_window_left="<C-w><left> move split left"
let g:WhichKeyDesc_vanilla_window_right="<C-w><right> move split right"
let g:WhichKeyDesc_vanilla_window_up="<C-w><up> move split up"
let g:WhichKeyDesc_vanilla_window_c="<C-w>c Close split"
let g:WhichKeyDesc_vanilla_window_C_c="<C-w><C-c>"
let g:WhichKeyDesc_vanilla_window_h="<C-w>h move split left"
let g:WhichKeyDesc_vanilla_window_C_h="<C-w><C-h>"
let g:WhichKeyDesc_vanilla_window_j="<C-w>j move split down"
let g:WhichKeyDesc_vanilla_window_C_j="<C-w><C-j>"
let g:WhichKeyDesc_vanilla_window_k="<C-w>k move split up"
let g:WhichKeyDesc_vanilla_window_C_k="<C-w><C-k>"
let g:WhichKeyDesc_vanilla_window_l="<C-w>l move split right"
let g:WhichKeyDesc_vanilla_window_C_l="<C-w><C-l>"
let g:WhichKeyDesc_vanilla_window_o="<C-w>o close Other splits (Only)"
let g:WhichKeyDesc_vanilla_window_C_o="<C-w><C-o>"
let g:WhichKeyDesc_vanilla_window_s="<C-w>s Split horizontally"
let g:WhichKeyDesc_vanilla_window_S="<C-w>S"
let g:WhichKeyDesc_vanilla_window_C_s="<C-w><C-s>"
let g:WhichKeyDesc_vanilla_window_v="<C-w>v split Vertically"
let g:WhichKeyDesc_vanilla_window_C_v="<C-w><C-v>"
let g:WhichKeyDesc_vanilla_window_w="<C-w>w select next Window"
let g:WhichKeyDesc_vanilla_window_C_w="<C-w><C-w>"
let g:WhichKeyDesc_vanilla_window_W="<C-w>W select previous Window"
""" WhichKey Vanilla descriptions end--------
""" -----------------------------------------

""" Leader ------------------------
" Inspired by Space mode by https://docs.helix-editor.com/keymap.html#space-mode
let g:WhichKeyDesc_space="<leader> Space mode..."
nmap <leader>f <Action>(GotoFile)
let g:WhichKeyDesc_findFile="<leader>f open File picker"
nmap <leader>F :NERDTreeFind
let g:WhichKeyDesc_findFileFind="<leader>F Find current File in explorer"
nmap <leader>e :NERDTree
let g:WhichKeyDesc_findExplorer="<leader>e open file Explorer"
nmap <leader>b <Action>(RecentFiles)
let g:WhichKeyDesc_findBuffer="<leader>b open Buffer picker (recent files)"
nmap <leader>j <Action>(RecentLocations)
let g:WhichKeyDesc_findLocation="<leader>j open Jumplist picker (recent locations)"
nmap <leader>g <Action>(RecentChangedFiles)
let g:WhichKeyDesc_findChangedLocation="<leader>g open chanGed files picker"
nmap <leader>k <Action>(QuickImplementations)
let g:WhichKeyDesc_showQuickImplementation="<leader>k show quick implementation"
nmap <leader>s <Action>(FileStructurePopup)
let g:WhichKeyDesc_showGotoStructure="<leader>s open document Structure picker"
nmap <leader>S <Action>(GotoSymbol)
let g:WhichKeyDesc_showGotoSymbol="<leader>S open Symbol picker"
nmap <leader>d <Action>(ActivateProblemsViewToolWindow)
let g:WhichKeyDesc_showFileDiagnostics="<leader>d show file Diagnostics"
nmap <leader>D <Action>(ActivateProblemsViewToolWindow)
let g:WhichKeyDesc_showProjectDiagnostics="<leader>D show project Diagnostics"
nmap <leader>r <Action>(RenameElement)
let g:WhichKeyDesc_rename="<leader>r Rename element"
nmap <leader>a <Action>(ShowIntentionActions)
let g:WhichKeyDesc_showIntentionActions="<leader>a Apply code actions"
nmap <leader>h <Action>(ShowUsages)
let g:WhichKeyDesc_showReferences="<leader>h select symbol references"
nmap <leader>w <C-w>
let g:WhichKeyDesc_toWindowMode="<leader>w go to Window mode"
nmap <leader>c <Action>(CommentByLineComment)
vmap <leader>c <Action>(CommentByLineComment)
let g:WhichKeyDesc_toggleComments="<leader>c toggle Comments"
nmap <leader>C <Action>(CommentByBlockComment)
vmap <leader>C <Action>(CommentByBlockComment)
let g:WhichKeyDesc_toggleBlockComments="<leader>C toggle block Comments"
nmap <leader><A-c> <Action>(CommentByLineComment)
vmap <leader><A-c> <Action>(CommentByLineComment)
let g:WhichKeyDesc_toggleLineComments="<leader><A-c> toggle line Comments"
nmap <leader>p "+p
vmap <leader>p "+p
let g:WhichKeyDesc_systemPaste="<leader>p Paste from system clipboard (after)"
nmap <leader>P "+P
vmap <leader>P "+P
let g:WhichKeyDesc_systemPasteBefore="<leader>P Paste from system clipboard (before)"
nmap <leader>y "+y
vmap <leader>y "+y
let g:WhichKeyDesc_systemYank="<leader>y Yank to system clipboard"
vmap <leader>R "+p
let g:WhichKeyDesc_systemReplace="<leader>R Replace selection by system clipboard"
nmap <leader>/ <Action>(FindInPath)
let g:WhichKeyDesc_showFindInPath="<leader>/ global search (Find in path)"
nmap <leader>? <Action>(GotoAction)
let g:WhichKeyDesc_showGotoAction="<leader>? Open command palette"

nmap <leader>R <Action>(Refactorings.QuickListPopupAction)
vmap <leader>R <Action>(Refactorings.QuickListPopupAction)
let g:WhichKeyDesc_refactorMenu="<leader>R Refactor menu"

"   Run tests/debug
let g:WhichKeyDesc_debug="<leader>G Debug..."
nmap <leader>Gb <Action>(ToggleLineBreakpoint)
let g:WhichKeyDesc_debug_toggleLineBreakpoint="<leader>Gb toggle line Breakpoint"
nmap <leader>Gs <Action>(Stop)
let g:WhichKeyDesc_debug_stop="<leader>Gs Stop execution"
nmap <leader>Gd <Action>(DebugClass)
let g:WhichKeyDesc_debug_debug="<leader>Gd Debug class"
nmap <leader>Gt <Action>(RunClass)
let g:WhichKeyDesc_debug_runTest="<leader>Gt run Test"
nmap <leader>Gr <Action>(RerunFailedTests)
let g:WhichKeyDesc_debug_rerunFailedTest="<leader>Gr Rerun failed Tests"

"    VCS
let g:WhichKeyDesc_vsc="<leader>v VCS..."
nmap <leader>va <Action>(Annotate)
let g:WhichKeyDesc_showVscAnnotate="<leader>va Annotate"
nmap <leader>vc <Action>(VcsShowCurrentChangeMarker)
let g:WhichKeyDesc_showVscCurrentChange="<leader>vc show Current change"
nmap <leader>vf <Action>(Vcs.ShowTabbedFileHistory)
let g:WhichKeyDesc_undoVscFileHistory="<leader>vf current File history"
nmap <leader>vg <Action>(ActivateCommitToolWindow)
let g:WhichKeyDesc_showVscCommitWindow="<leader>vg commit change to Git"
nmap <leader>vl <Action>(Vcs.Show.Log)
let g:WhichKeyDesc_undoVscLog="<leader>vl Log"
nmap <leader>vu <Action>(Vcs.RollbackChangedLines)
let g:WhichKeyDesc_undoVscCurrentChange="<leader>vu Undo current change"

""" Goto ------------------------
" Inspired by Goto mode by https://docs.helix-editor.com/keymap.html#goto-mode
nmap gD <Action>(GotoSuperMethod)
let g:WhichKeyDesc_gotoDefinition="gD go to Definition"
nmap gd <Action>(GotoDeclaration)
let g:WhichKeyDesc_gotoDeclaration="gd go to Declaration"
nmap gy <Action>(QuickTypeDefinition)
let g:WhichKeyDesc_quickTypeDefinition="gy quick type definition"
nmap gi <Action>(GotoImplementation)
let g:WhichKeyDesc_gotoImplementation="gi go to Implementation"
nmap gr <Action>(ShowUsages)
let g:WhichKeyDesc_gotoReferences="gr go to References"
nmap gh 0
let g:WhichKeyDesc_gotoFirstCharInLine="gh go to first column (0)"
nmap gl $
let g:WhichKeyDesc_gotoLastCharInLine="gl go to Last character in line ($)"
nmap gs _
let g:WhichKeyDesc_gotoFirstNonWhitespace="gs go to Start of line (_)"
nmap gt H
let g:WhichKeyDesc_gotoTop="gt go to Top of file (H)"
nmap gc M
let g:WhichKeyDesc_gotoCentre="gc to Centre of file (M)"
nmap gb L
let g:WhichKeyDesc_gotoBottom="gb to Bottom of file (L)"
nmap g. `.
let g:WhichKeyDesc_gotoLastModificationCurrentFile="g. go to last modification (`.)"
nmap g; <Action>(JumpToLastChange)
let g:WhichKeyDesc_gotoPrevEditLocation="g; go to previous edit location"
nmap g, <Action>(JumpToNextChange)
let g:WhichKeyDesc_gotoNextEditLocation="g, go to next edit location"
nmap ga <C-^>
let g:WhichKeyDesc_gotoAlternateFile="ga go to Alternate file (<C-^>)"
nmap gw <Action>(AceWordStartAction)
xmap gw <Action>(AceWordStartAction)
let g:WhichKeyDesc_AceAction="gw jump to Word"

nmap gQ <Action>(ReformatCode)
vmap gQ <Action>(ReformatCode)
let g:WhichKeyDesc_reformatCode="gQ format whole file"

""" Next / Previous --------------------------
" Inspired by unimpaired mappings by https://docs.helix-editor.com/keymap.html#unimpaired
nmap ]d <Action>(GotoNextError)
let g:WhichKeyDesc_goToNextDiagnostic="]d go to next Diagnostic"
nmap [d <Action>(GotoPreviousError)
let g:WhichKeyDesc_goToPrevDiagnostic="[d go to previous Diagnostic"
nmap [D gg<Action>(GotoNextError)
let g:WhichKeyDesc_goToFirstDiagnostic="[D go to first Diagnostic"
nmap ]D G<Action>(GotoPreviousError)
let g:WhichKeyDesc_goToLastDiagnostic="]D go to last Diagnostic"
vmap [p <Action>(EditorBackwardParagraph)
let g:WhichKeyDesc_prevParagraph="[a previous paragraph"
vmap ]a <Action>(EditorForwardParagraph)
let g:WhichKeyDesc_nextParagraph="]a next paragraph"
nmap [g <Action>(VcsShowPrevChangeMarker)
let g:WhichKeyDesc_prevChange="[g previous change (Git)"
nmap ]g <Action>(VcsShowNextChangeMarker)
let g:WhichKeyDesc_nextChange="]g next change (Git)"
nmap [G gg<Action>(VcsShowNextChangeMarker)
let g:WhichKeyDesc_firstChange="[G first change (Git)"
nmap ]G G<Action>(VcsShowPrevChangeMarker)
let g:WhichKeyDesc_lastChange="]G last change (Git)"
nmap [<Space> <Action>(EditorStartNewLineBefore)
let g:WhichKeyDesc_startNewLineBefore="[<Space> add newline above"
nmap ]<Space> <Action>(EditorStartNewLine)
let g:WhichKeyDesc_startNewLine="]<Space> add newline below"

nmap [e <Action>(MoveLineUp)
vmap [e <Action>(MoveLineUp)
let g:WhichKeyDesc_moveLineUp="[e move line up"
nmap ]e <Action>(MoveLineDown)
vmap ]e <Action>(MoveLineDown)
let g:WhichKeyDesc_moveLineDown="]e move line down"
vmap [v <Action>(EditorUnSelectWord)
let g:WhichKeyDesc_unSelectWord="[v shrink Visual selection"
vmap ]v <Action>(EditorSelectWord)
let g:WhichKeyDesc_selectWord="]v grow Visual selection"

" Enable if I start using tabs again...
"nmap [b <Action>(PreviousTab)
"let g:WhichKeyDesc_prevTab="[b goto previous tab (Buffer)"
"nmap ]b <Action>(NextTab)
"let g:WhichKeyDesc_nextTab="]b goto next tab (Buffer)"
"nmap [B <Action>(GoToTab1)
"let g:WhichKeyDesc_firstTab="[B goto first tab (Buffer)"
"nmap ]B <Action>(GoToLastTab)
"let g:WhichKeyDesc_lastTab="]B goto last tab (Buffer)"

" window -------------------------------
nmap <C-w>d <Action>(ShowErrorDescription)
nmap <C-w><C-d> <Action>(ShowErrorDescription)
let g:WhichKeyDesc_showDiagnosticDesc="<C-w>d show Diagnostic description"
let g:WhichKeyDesc_showDiagnosticDescCtr="<C-w><C-d>"
nmap <C-w>x <Action>(MoveEditorToOppositeTabGroup)
let g:WhichKeyDesc_moveTabToOppositeGroup="<C-w>x eXchange split"
nmap <C-w>q <Action>(CloseAllEditors)
let g:WhichKeyDesc_closeAllBuffersInSplit="<C-w>q Quit all buffers in split"
nmap <C-w>n <Action>(EditSourceInNewWindow)
let g:WhichKeyDesc_editSourceInNewWindow="<C-w>n open New window"
nmap <leader>W <Action>(HideAllWindows)
let g:WhichKeyDesc_hideAllWindows="<leader>W hide all Windows"

""" Common settings -------------------------
" Indent wrapped lines to match line start
set breakindent
" Highlight current line
set cursorline
" show whitespace
set list
" show line numbers
set number
" relative line numbers
set relativenumber

" Minimal number of lines to scroll
set scrolljump=5
" Minimal number of lines above and below the cursor
set scrolloff=10
" Minimal number of columns to scroll horizontally
set sidescrolloff=10
" Minimal number of columns above and below the cursor
set sidescrolloff=10

" Ignore case in search patterns
set ignorecase
" Show where search pattern types so far matches
set incsearch
" Use case sensitive search if any character in the pattern is uppercase
set smartcase
" When on, prevents beeping on error
set visualbell

""" Idea specific settings ------------------
" Join is handled by IDE
set ideajoin

"   Don't use Ex mode, use Q for formatting
nmap Q <Action>(ReformatCode)
vmap Q <Action>(ReformatCode)
let g:WhichKeyDesc_ex_mode="Q format whole file"

"  Fix for Idea jumps not populating vim jumplist "
nmap <C-o> <Action>(Back)
nmap <C-i> <Action>(Forward)

"   Windows
nmap <S-Space> <Action>(GotoNextError)
let g:WhichKeyDesc_goToNextError="<S-Space> go to next error"
imap <M-p> <Action>(ParameterInfo)
nmap <M-p> <Action>(ParameterInfo)
let g:WhichKeyDesc_parameterInfo="<M-p> Parameter info"

""" Digraphs -------------------------------
"   <C-k> <letter to use> <mutation> to insert a digraph
"   <C-k>e: ë
"   <C-k>e' é
"   <C-k>e` è (also e!)
"   <C-k>e. ė
"   <C-k>e> ê
"
"   Euro sign is usually Eu or =e, but Ideavim does not support it natively
dig Eu 8364
dig =e 8364

""" Personal bindings -----------------------
"   Add some movement to insertmode
imap <M-k> <Up>
imap <M-j> <Down>
imap <M-l> <Right>
imap <M-h> <Left>

"   I often don't want to use regexes in my searches
let g:WhichKeyDesc_personalLeader="\\ substitute..."
nmap \\/ /\V
vmap \\/ /\V
let g:WhichKeyDesc_nomagicSearch="\\/ Search next using 'very-nomagic' mode"
nmap \\? ?\V
vmap \\? ?\V
let g:WhichKeyDesc_nomagicSearchReverse="\\? Search previous using 'very-nomagic' mode"
nmap \\: :s/\V
vmap \\: :s/\V
let g:WhichKeyDesc_nomagicSubstitute="\\: Substitute using 'very-nomagic' mode"
nmap \\% :s%/\V
let g:WhichKeyDesc_nomagicSubstituteAll="\\% Substitute in all lines using 'very-nomagic' mode"

"   Jetpack bind, a bit buggy here though
"nmap <leader>j :ls<cr>:b<space>
"let g:WhichKeyDesc_jetpack="<leader>j Jetpack bind (a bit buggy)"

"   CamelCase to snake_case
nmap \\u :s/\(\u\)/_\l\1/g<cr>
let g:WhichKeyDesc_to_snake_case="\\u convert line to snake_case"
"   snake_case to CamelCase
nmap \\U :s/_\(\l\)/\u\1/g<cr>
let g:WhichKeyDesc_to_CamelCase="\\U convert line To CamelCase"
"   remove all trailing whitespace
nmap \\t :%s/\s\+$//e<cr>
let g:WhichKeyDesc_remove_trailing_whitespace="\\t delete Trailing whitespace"

"    Exchange/Surround whichkey descriptions
let g:WhichKeyDesc_c="c Change..."
let g:WhichKeyDesc_cs="cs Surrounding..."
let g:WhichKeyDesc_cx="cx eXchange..."
let g:WhichKeyDesc_cxx="cxx eXchange line"
let g:WhichKeyDesc_cxc="cxc Clear exchange"
let g:WhichKeyDesc_X="X eXchange"
