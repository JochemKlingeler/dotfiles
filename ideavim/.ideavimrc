""" Map leader to space ---------------------
let mapleader=" "

""" Plugins  --------------------------------
set surround
set commentary
set argtextobj
set exchange
set highlightedyank
set NERDTree
set vim-paragraph-motion
set matchit
set which-key
set quickscope

""" Plugin settings -------------------------
let g:argtextobj_pairs="[:],(:),<:>,{:}"

""" WhichKey settings -----------------------
set timeoutlen=500000
let g:WhichKey_ShowVimActions="true"
let g:WhichKey_DefaultDelay=100
let g:WhichKey_ShowTypedSequence="true"

""" Common settings -------------------------
set showmode
set showcmd
set scrolloff=10
set relativenumber
set number
set ignorecase
set smartcase
set visualbell

""" Idea specific settings ------------------
set ideajoin
set idearefactormode=select

"  Fix for Idea jumps not populating vim jumplist "
nmap <C-o> <Action>(Back)
nmap <C-i> <Action>(Forward)

""" JetBeans actions ------------------------
let g:WhichKeyDesc_find="<leader>f Find..."
nmap <leader>fa <Action>(GotoAction)
let g:WhichKeyDesc_findAction="<leader>fa find Action"
nmap <leader>fe <Action>(SearchEverywhere)
let g:WhichKeyDesc_findEverywhere="<leader>fe find Everywhere"
nmap <leader>fc <Action>(GotoClass)
let g:WhichKeyDesc_findClass="<leader>fc find Class"
nmap <leader>ff <Action>(GotoFile)
let g:WhichKeyDesc_findFile="<leader>ff find File"
nmap <leader>fr <Action>(RecentFiles)
let g:WhichKeyDesc_findRecentFiles="<leader>fr find in Recent files"
nmap <leader>fg <Action>(FindInPath)
let g:WhichKeyDesc_findInPath="<leader>fg find in Path"

nmap <leader>k <Action>(ShowErrorDescription)
let g:WhichKeyDesc_showErrorDesc="<leader>k show error description"

nmap gD <Action>(GotoImplementation)
let g:WhichKeyDesc_gotoImplementation="gD go to Implementation"
nmap gs <Action>(GotoSuperMethod)
let g:WhichKeyDesc_gotoSuperMethod="gs go to Super-method"

"   Run tests/debug
nmap <leader>b <Action>(ToggleLineBreakpoint)
let g:WhichKeyDesc_toggleLineBreakpoint="<leader>b toggle line Breakpoint"
nmap <leader>c <Action>(Stop)
let g:WhichKeyDesc_stop="<leader>c stop"
nmap <leader>d <Action>(DebugClass)
let g:WhichKeyDesc_debugClass="<leader>d Debug class"
nmap <leader>t <Action>(RunClass)
let g:WhichKeyDesc_runTest="<leader>t run Test"
nmap <leader>T <Action>(RerunFailedTests)
let g:WhichKeyDesc_rerunFailedTest="<leader>T rerun failed Tests"

"   Refactor
nmap <leader>r <Action>(RenameElement)
let g:WhichKeyDesc_rename="<leader>r Rename element"
nmap <leader>R <Action>(Refactorings.QuickListPopupAction)
let g:WhichKeyDesc_refactorMenu="<leader>R Refactor menu"

"   Windows
nmap <leader>a <Action>(Annotate)
let g:WhichKeyDesc_annotate="<leader>a Annotate"
nmap <leader>o <Action>(FileStructurePopup)
let g:WhichKeyDesc_fileStructurePopup="<leader>o file structure popup"
nmap <leader>s <Action>(SelectInProjectView)
let g:WhichKeyDesc_selectInProjectView="<leader>s Select in project view"
nmap <leader>w <Action>(HideAllWindows)
let g:WhichKeyDesc_hideAllWindows="<leader>w hide all Windows"
nmap <S-Space> <Action>(GotoNextError)
let g:WhichKeyDesc_goToNextError="<S-Space> go to next error"

nmap <leader>z <Action>(ToggleDistractionFreeMode)
let g:WhichKeyDesc_zen="<leader>z toggle Zen mode"

imap <M-p> <Action>(ParameterInfo)
let g:WhichKeyDesc_parameterInfo="<M-p> Parameter info"

""" Digraphs -------------------------------
"   <C-k> <letter to use> <mutation> to insert a digraph
"   <C-k>e: ë
"   <C-k>e' é
"   <C-k>e! è
"   Euro sign is usually Eu or =e, but Ideavim does not support it apparently
imap <M-=> €
let g:WhichKeyDesc_euroSign="<M-=> Insert Euro (€) sign"

""" Personal bindings -----------------------
"   Add some movement to insertmode
imap <M-k> <Up>
imap <M-j> <Down>
imap <M-l> <Right>
imap <M-h> <Left>

"   I often don't want to use regexes in my searches
nmap <leader>/ /\V
vmap <leader>/ /\V
let g:WhichKeyDesc_nomagicSearch="<leader>/ Search next using 'very-nomagic' mode"
nmap <leader>? ?\V
vmap <leader>? ?\V
let g:WhichKeyDesc_nomagicSearchReverse="<leader>? Search previous using 'very-nomagic' mode"
nmap <leader>: :s/\V
vmap <leader>: :s/\V
let g:WhichKeyDesc_nomagicSubstitute="<leader>: Substitute using 'very-nomagic' mode"
nmap <leader>% :s%/\V
let g:WhichKeyDesc_nomagicSubstituteAll="<leader>% Substitute in all lines using 'very-nomagic' mode"

"   Don't use Ex mode, use Q for formatting
map Q gq

"   Jetpack bind, a bit buggy here though
nmap <leader>l :ls<cr>:b<space>
let g:WichKeyDesc_jetpack="<leader>l Jetpack bind (a bit buggy)"

nmap <leader>p "0p
let g:WhichKeyDesc_paste="<leader>p Paste from copy register"
nmap <leader>P "+p
let g:WhichKeyDesc_system_paste="<leader>P Paste from system clipboard"
"   CamelCase to snake_case
nmap <leader>u :s/\(\u\)/_\l\1/g<cr>
let g:WhichKeyDesc_to_snake_case="<leader>u convert line to snake_case"
"   snake_case to CamelCase
nmap <leader>U :s/_\(\l\)/\u\1/g<cr>
let g:WhichKeyDesc_to_CamelCase="<leader>U convert line To CamelCase"
"   remove all trailing whitespace
nmap <leader>T :%s/\s\+$//e<cr>
let g:WhichKeyDesc_remove_trailing_whitespace="<leader>T delete Trailing whitespace"

" Use tab to insert a single character
nmap <tab> i_<Esc>r
let g:WhichKeyDesc_replace_single_char="<tab> Insert single char"

""" Copilot -----------------
imap <M-;> <Action>(copilot.applyInlays)
let g:WhichKeyDesc_copilotApplyInlays="<M-;> Copilot: apply inlays next Word"
imap <M-w> <Action>(copilot.applyInlaysNextWord)
let g:WhichKeyDesc_copilotApplyInlaysNextWord="<M-w> Copilot: apply inlays next Word"
imap <M-n> <Action>(copilot.cycleNextInlays)
let g:WhichKeyDesc_copilotNext="<M-n> Copilot: cycle Next inlines"

""" Next / Previous --------------------------
let g:WhichKeyDesc_prev="[ Previous..."
let g:WhichKeyDesc_next="] Next..."

nmap [c <Action>(VcsShowPrevChangeMarker)
let g:WhichKeyDesc_prevChange="[c previous Change"
nmap ]c <Action>(VcsShowNextChangeMarker)
let g:WhichKeyDesc_nextChange="]c next Change"

vmap [v <Action>(EditorUnSelectWord)
let g:WhichKeyDesc_unSelectWord="[v unselect word"
vmap ]v <Action>(EditorSelectWord)
let g:WhichKeyDesc_selectWord="]v select word"

" unimpared -------------------------------
nmap [b <Action>(PreviousTab)
let g:WhichKeyDesc_prevTab="[b goto previous tab (Buffer)"
nmap ]b <Action>(NextTab)
let g:WhichKeyDesc_nextTab="]b goto next tab (Buffer)"
nmap [B <Action>(GoToTab1)
let g:WhichKeyDesc_firstTab="[B goto first tab (Buffer)"
nmap ]B <Action>(GoToLastTab)
let g:WhichKeyDesc_lastTab="]B goto last tab (Buffer)"
nmap [e <Action>(MoveLineUp)
let g:WhichKeyDesc_moveLineUp="[e move line up"
nmap ]e <Action>(MoveLineDown)
let g:WhichKeyDesc_moveLineDown="]e move line down"
nmap [<space> <Action>(EditorStartNewLineBefore)
let g:WhichKeyDesc_startNewLineBefore="[<space> start new line before current"
nmap ]<space> <Action>(EditorStartNewLine)
let g:WhichKeyDesc_startNewLine="]<space> start new line"

""" Neovim default bindings -------------------------
nmap ]d <Action>(GotoNextError)
let g:WhichKeyDesc_goToNextDiagnostic="]d go to next Diagnostic"
nmap [d <Action>(GotoPreviousError)
let g:WhichKeyDesc_goToNextDiagnostic="[d go to previous Diagnostic"
nmap <C-w>d <Action>(ShowErrorDescription)
let g:WhichKeyDesc_showDiagnosticDesc="<C-w>d show Diagnostic description"
nmap <C-w><C-d> <Action>(ShowErrorDescription)
let g:WhichKeyDesc_showDiagnosticCtrlDesc="<C-w><C-d> show Diagnostic description"
